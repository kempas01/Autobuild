name: Build Docker Images on YAML Change
on:
 workflow_dispatch: 
 push:
   paths:
     - input.yaml

jobs:
 build:
   runs-on: ubuntu-latest
   strategy:
     fail-fast: false

   steps:
   - name: Checkout repository
     uses: actions/checkout@v2

   - name: Set up Python
     uses: actions/setup-python@v2
     with:
       python-version: '3.8'

   - name: Install PyYAML
     run: |
       python -m pip install --upgrade pip
       pip install pyyaml

   - name: Read YAML and generate matrix
     id: read-yaml
     run: |
       python -c "
import yaml
import json
with open('input.yaml', 'r') as file:
   data = yaml.safe_load(file)
   matrix = [{'block_name': key, 'inputs': value} for key, value in data.items() if value.get('build_required') == 'yes']
   print(f'::set-output name=matrix::{json.dumps(matrix)}')
       "
     shell: bash

   - name: Set up build matrix
     uses: actions/github-script@v3
     id: build-matrix
     with:
       script: |
         const matrix = JSON.parse(process.env.matrix);
         return { matrix };
         
  - name: Login to DockerHub
    uses: docker/login-action@v1
    with:
       username: ${{ secrets.DOCKER_USERNAME }}
       password: ${{ secrets.DOCKER_PASSWORD }}

 build_images:
   needs: build
   runs-on: ubuntu-latest
   strategy:
     matrix: ${{ fromJson(needs.build-matrix.outputs.matrix) }}

   steps:
   - name: Checkout repository
     uses: actions/checkout@v2

   - name: Set up Docker build arguments
     run: |
       inputs="${{ toJson(matrix.inputs.build_args) }}"
       args=""
       for key in $(echo $inputs | jq -r 'keys[]'); do
         value=$(echo $inputs | jq -r ".[$key]")
         args+="--env $key=$value "
       done
       echo "DOCKER_BUILD_ARGS=$args" >> $GITHUB_ENV
     shell: bash

   - name: Build and push Docker image
     run: |
       dockerfile="${{ matrix.inputs.dockerfile }}"
       image_tag="${{ matrix.block_name }}"
       docker build ${{ env.DOCKER_BUILD_ARGS }} -f $dockerfile -t your-docker-repo/${image_tag}:${image_tag} .
       docker push your-docker-repo/${image_tag}:${image_tag}
     shell: bash
